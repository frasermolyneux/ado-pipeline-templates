parameters:
- name: azureSubscription
  type: string
- name: terraformFolder
  default: "terraform"
  type: string
- name: terraformVarFile
  default: "tfvars/dev.tfvars"
  type: string
- name: backendResourceGroupName
  type: string
  default: ""
- name: backendStorageAccountName
  type: string
  default: ""
- name: backendContainerName
  default: "tfstate"
  type: string
- name: backendKey
  default: "terraform.tfstate"
  type: string
- name: terraformVersion
  default: latest

steps:
  - task: TerraformInstaller@0
    displayName: 'Terraform: Install'
    inputs:
      terraformVersion: ${{ parameters.terraformVersion }}

  - task: TerraformTaskV4@4
    displayName: Terraform Init
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '${{ parameters.terraformFolder }}'
      backendServiceArm: '${{ parameters.azureSubscription }}'
      backendAzureRmResourceGroupName: '${{ parameters.backendResourceGroupName }}'
      backendAzureRmStorageAccountName: '${{ parameters.backendStorageAccountName }}'
      backendAzureRmContainerName: '${{ parameters.backendContainerName }}'
      backendAzureRmKey: '${{ parameters.backendKey }}'
      backendAzureRmUseEnvironmentVariablesForAuthentication: true
      backendAzureRmUseEntraIdForAuthentication: true
      commandOptions: '-var-file=${{ parameters.terraformVarFile }}'

  - task: TerraformTaskV4@4
    displayName: Terraform Validate
    inputs:
      provider: 'azurerm'
      command: 'validate'
      workingDirectory: '${{ parameters.terraformFolder }}'
      environmentServiceNameAzureRM: '${{ parameters.azureSubscription }}'

  - task: TerraformTaskV4@4
    displayName: Terraform Init
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '${{ parameters.terraformFolder }}'
      environmentServiceNameAzureRM: '${{ parameters.azureSubscription }}'
      commandOptions: '-var-file="${{ parameters.terraformVarFile }}" -auto-approve'

  - powershell: |
      $terraformOutput = Get-Content "$(terraform_apply.jsonOutputVariablesPath)" | ConvertFrom-Json
      $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
    name: terraform_output
    displayName: 'Read terraform output vars'