parameters:
- name: azureSubscription
  type: string
- name: terraformFolder
  default: "terraform"
  type: string
- name: terraformVarFile
  default: "tfvars/dev.tfvars"
  type: string
- name: terraformBackendFile
  type: string
- name: backendSubscriptionId
  type: string
  default: ""
- name: backendResourceGroupName
  type: string
  default: ""
- name: backendStorageAccountName
  type: string
  default: ""
- name: backendContainerName
  default: "tfstate"
  type: string
- name: backendKey
  default: "terraform.tfstate"
  type: string
- name: backendTags
  default: ""
  type: string
- name: terraformVersion
  default: latest
- name: AZURE_CLIENT_ID
  type: string
- name: AZURE_TENANT_ID
  type: string
- name: AZURE_SUBSCRIPTION_ID
  type: string

steps:
  - task: TerraformInstaller@0
    displayName: 'Terraform: Install'
    inputs:
      terraformVersion: ${{ parameters.terraformVersion }}

  - task: TerraformTaskV4@4
    displayName: Terraform Init
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '${{ parameters.terraformFolder }}'
      backendServiceArm: '${{ parameters.azureSubscription }}'
      commandOptions: '-backend-config="${{ parameters.terraformBackendFile }}" -var-file="${{ parameters.terraformVarFile }}"'

  - task: TerraformTaskV4@4
    displayName: Terraform Validate
    inputs:
      provider: 'azurerm'
      command: 'validate'
      workingDirectory: '${{ parameters.terraformFolder }}'
      backendServiceArm: '${{ parameters.azureSubscription }}'
      commandOptions: '-backend-config="${{ parameters.terraformBackendFile }}" -var-file="${{ parameters.terraformVarFile }}"'

  - task: TerraformTaskV4@4
    displayName: Terraform Init
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '${{ parameters.terraformFolder }}'
      backendServiceArm: '${{ parameters.azureSubscription }}'
      commandOptions: '-backend-config="${{ parameters.terraformBackendFile }}" -var-file="${{ parameters.terraformVarFile }}" -auto-approve'
