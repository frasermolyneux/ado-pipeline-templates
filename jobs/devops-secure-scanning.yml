parameters:
- name: jobName
  type: string
  default: DevOpsSecureScanning
- name: dependsOn
  type: object
  default: []
- name: tools
  type: string
  default: 'checkov, terrascan'

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.dependsOn }}

  workspace:
    clean: all

  steps: 
    - checkout: self

    - task: ps-rule-install@2
      inputs:
        module: PSRule.Rules.Azure

    - task: ps-rule-install@2
      inputs:
        module: PSRule.Rules.CAF
    
    - task: MicrosoftSecurityDevOps@1
      displayName: 'Microsoft Security DevOps'
      inputs:    
        # config: string. Optional. A file path to an MSDO configuration file ('*.gdnconfig'). Vist the MSDO GitHub wiki linked below for additional configuration instructions
        # policy: 'azuredevops' | 'microsoft' | 'none'. Optional. The name of a well-known Microsoft policy to determine the tools/checks to run. If no configuration file or list of tools is provided, the policy may instruct MSDO which tools to run. Default: azuredevops.
        # categories: string. Optional. A comma-separated list of analyzer categories to run. Values: 'code', 'artifacts', 'IaC', 'containers'. Example: 'IaC, containers'. Defaults to all.
        # languages: string. Optional. A comma-separated list of languages to analyze. Example: 'javascript,typescript'. Defaults to all.
        # tools: string. Optional. A comma-separated list of analyzer tools to run. Values: 'bandit', 'binskim', 'checkov', 'eslint', 'templateanalyzer', 'terrascan', 'trivy'. Example 'templateanalyzer, trivy'
        tools: ${{ parameters.tools }}
        # break: boolean. Optional. If true, will fail this build step if any high severity level results are found. Default: false.
        break: true
        # publish: boolean. Optional. If true, will publish the output SARIF results file to the chosen pipeline artifact. Default: true.
        publish: false
        # artifactName: string. Optional. The name of the pipeline artifact to publish the SARIF result file to. Default: CodeAnalysisLogs*.

    - task: ps-rule-assert@2
      displayName: Analyze Azure template files
      inputs:
        outputFormat: Sarif
        outputPath: reports/ps-rule-results.sarif

    - task: CopyFiles@2
      inputs:
        contents: '**/.sarif'
        targetFolder: $(Build.ArtifactStagingDirectory)/sarif

    - publish: '$(Build.ArtifactStagingDirectory)/sarif/*.sarif'
      artifact: CodeAnalysisLogs
      displayName: Publish SARIF Logs
      condition: succeededOrFailed()