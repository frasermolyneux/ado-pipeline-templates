parameters:
- name: jobName
  type: string
  default: BuildNetLibrary
- name: dependsOn
  type: object
  default: []
- name: publishToNuGet
  type: boolean
  default: false
- name: projectName
  type: string
  default: 'library'
- name: MajorMinorVersion
  type: string
  default: '1.0'
- name: nugetConfigPath
  type: string
  default: ''

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: ${{ parameters.dependsOn }}

  variables:
    buildConfiguration: 'Release'

  steps:
  - task: UseDotNet@2
    inputs:
      version: 6.0.x
      performMultiLevelLookup: true
      includePreviewVersions: true
  
  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '**/${{ parameters.projectName }}.csproj'
      ${{ if ne(parameters.nugetConfigPath, '') }}:
        feedsToUse: 'config'
        nugetConfigPath: ${{ parameters.nugetConfigPath }}

  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: '**/${{ parameters.projectName }}.csproj'
      arguments: '--configuration $(buildConfiguration)'
    displayName: 'dotnet build $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq('${{ parameters.publishToNuGet }}', 'true'))
    inputs:
      command: pack
      packagesToPack: '**/${{ parameters.projectName }}.csproj'
      packDestination: '$(Build.ArtifactStagingDirectory)'
      buildProperties: 'Version="${{ parameters.MajorMinorVersion }}.$(Build.BuildId)"'

  - task: NuGetAuthenticate@0
    condition: and(succeeded(), eq('${{ parameters.publishToNuGet }}', 'true'))
    displayName: 'NuGet Authenticate'

  - task: NuGetCommand@2
    condition: and(succeeded(), eq('${{ parameters.publishToNuGet }}', 'true'))
    inputs:
      command: push
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      publishVstsFeed: 'Personal-Public/personal-public-packages'